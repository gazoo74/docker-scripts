#!/bin/bash
#
# Copyright (c) 2017 Gaël PORTAY <gael.portay@savoirfairelinux.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the MIT License.
#

set -e
set -o pipefail

# tarcat($tarfile [taropts])
#
# Concatenate tar to stdout
tarcat() {
	tar xOf "$@"
}

# image_get_id($TAR)
#
# Extract images from manifest
manifest_get_images() {
	local imageids=
	eval "$(tarcat "$TAR" "manifest.json" | \
	       jq -r '@sh "imageids+=\\ \(.[].RepoTags[])"')"
	echo $imageids
}

# manifest_get_config($TAR)
#
# Extract config from manifest
manifest_get_config() {
	local key=
	eval "$(tarcat "$TAR" "manifest.json" | \
	       jq -r '@sh "key+=\\ \(.[].Config)"')"
	echo $key
}

# manifest_get_repotags($TAR, $n)
#
# Extract config n from manifest
manifest_get_repotags() {
	local key=
	eval "$(tarcat "$TAR" "manifest.json" | \
	       jq -r '@sh "key+=\\ \(.['"$1"'].RepoTags[])"')"
	echo $key
}

# manifest_get_layers($TAR, $n)
#
# Extract layers n from manifest
manifest_get_layers() {
	local key=
	eval "$(tarcat "$TAR" "manifest.json" | \
	       jq -r '@sh "key+=\\ \(.['"$1"'].Layers[])"')"
	echo $key
}

# image_get_id($TAR, $repo:tag)
#
# Extract id from repositories
image_get_id() {
	local repo="${1%:*}"
	local tag="${1##*:}"
	local key=
	eval "$(tarcat "$TAR" "repositories" | \
	       jq -r "@sh \"key=\(.\"$repo\".\"$tag\")\"")"
	echo $key
}

# config_get_key($TAR, $id, $key)
#
# Extract $key from $id config
config_get_key() {
	local key=
	eval "$(tarcat "$TAR" "$1.json" | \
	       jq -r "@sh \"key=\(.\"$2\")\"")"
	echo $key
}

# layer_get_key($TAR, $layer, $key)
#
# Extract $key from $layer
layer_get_key() {
	local key=
	eval "$(tarcat "$TAR" "$1/json" | \
	       jq -r "@sh \"key=\(.\"$2\")\"")"
	echo $key
}

jsoncat() {
	if $opt_json; then
		echo
		tarcat "$@" | jq . | sed -e 's,^,\t,'
		echo
	fi
}

log() {
	local json_file config_files repotags id parent p i j

	# Pre-parse to remember existing parents.
	json_file="manifest.json"
	config_files="$(manifest_get_config)"
	declare -A parents
	i=0
	for config in $config_files; do
		repotags="$(manifest_get_repotags "$i")"
		for repotag in $repotags; do
			id="$(image_get_id "$repotag")"
			parent="$(layer_get_key "$id" "parent")"
			parents[$parent]="$repotag"
			parents[$id]="$repotag"
		done
		i="$((i+1))"
	done

	# Display manifest
	echo -e "\e[33m$1 (\e[31;1m${config_files/ /, }\e[0;33m)\e[0m"
	for key in "${!parents[@]}"; do
		echo "${key:0:12}:   ${parents[$key]}"
	done

	# Display json manifest content
	jsoncat "$1" "$json_file"

	# Display every manifest's config
	i=0
	for config in $config_files; do
		repotags="$(manifest_get_repotags "$i")"

		# Display every config's repository:tag
		for repotag in $repotags; do
			id="$(image_get_id "$repotag")"
			json_file="$id/json"

			# Display config
			echo -e "\e[33m${config:0:12} \e[36;1m$repotag -> \e[32m$json_file\e[0m"
			echo -n "Version:        "; tarcat "$TAR" "$id/VERSION" && echo
			echo    "Id:             ${id:0:12}"
			parent="$id"
			j=0
			while parent="$(layer_get_key "$parent" "parent")" &&
			      [ "$parent" != "null" ]; do
				echo -n "Parent-$((++j)):       ${parent:0:12}"

				p="${parents[$parent]}"
				if [ -z "$p" ] || [ "$p" = "$repotag" ]; then
					echo ""
				else
					echo " -> $p"
				fi
			done

			echo -n "Created:        "; tarcat "$TAR" "$json_file" | jq -r ".created" | xargs date -R --date
			echo -n "Container:      "; tarcat "$TAR" "$json_file" | jq -r ".container"
			echo -n "Docker-version: "; tarcat "$TAR" "$json_file" | jq -r ".docker_version"

			# Display json content
			jsoncat "$TAR" "$json_file"
		done
		i="$((i+1))"
	done
}

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] TAR...

Display à la git-log the content of docker archive to stdout.

Options:
      -j or --json              Display json content.
      -h or --help              Print usage.
EOF
}

parse_arguments() {
	tar_files=()
	opt_json=false
	while [ "$#" -ne 0 ]; do
		if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
			usage
			exit 0
		elif [ "$1" = "-j" ] || [ "$1" = "--json" ]; then
			opt_json=true
		else
			tar_files+=( "$1" )
		fi
		shift
	done
}

parse_arguments "$@"

if [ "${#tar_files}" -eq 0 ]; then
	usage
	echo "Too few arguments!" >&2
	exit 1
fi

for TAR in "${tar_files[@]}"; do
	log "$TAR"
done | ${PAGER:-less -r}
